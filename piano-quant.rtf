{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset238 Inconsolata;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs28 \cf2 MIDIClient\cf3 .init\
(\
m = \cf2 MIDIOut\cf3 (0);\
a = \{ \cf2 |freqs_buf|\cf3 \
	\cf2 var\cf3  in = \cf2 SoundIn\cf3 .ar(0); \
	\cf2 var\cf3  pitch, has_pitch, trig;\
	# pitch, has_pitch = \cf2 Tartini\cf3 .kr(in);\
	trig = has_pitch && abs(pitch - \cf2 LastValue\cf3 .kr(pitch)) ;\
	\cf2 SendReply\cf3 .kr(has_pitch, \cf4 'pitch'\cf3 , [pitch]) ;\
	freqs.poll;\
	\
\}.play(args:[\cf4 \\freqs\cf3 , [1,2,3,4]])\
\
)\
\
\
o = \cf2 OSCresponder\cf3 (\cf2 nil\cf3 , \cf4 'pitch'\cf3 , \
	\{\cf2 |t, r, msg|\cf3  msg[3].f2n.postln \}).add\
o.remove\
\cf4 'adu'\cf3 .hash\
\
\cf2 true\cf3  && \cf2 false\cf3 \
\
\cf2 BufRd\cf3 \
\cf2 SynthDef\cf3 (\cf4 \\pru\cf3 ) \{ \cf2 SinOsc\cf3 .ar(440) | \cf2 Out\cf3 .ar(0, \cf2 _\cf3 )\}\
\cf2 S}