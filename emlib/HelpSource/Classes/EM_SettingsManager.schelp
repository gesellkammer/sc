TITLE:: EM_SettingsManager
summary:: A very simple settings manager to persist settings and state across sessions
categories:: Undocumented classes
related:: ---

DESCRIPTION::
A simple manager for persistence of settings

CLASSMETHODS::

METHOD:: new
Create a new manager. You normally use one manager to control the settings of a patch.

ARGUMENT:: path
The path where to save the settings (a file name)

ARGUMENT:: persist_period
How often (in seconds) will the settings be saved to disk

ARGUMENT:: autostart
If true, the manager will start saving settings after creation.

returns::
A settings manager


INSTANCEMETHODS::

METHOD:: mpath
priv.

returns:: (describe returnvalue here)

METHOD:: mpersistperiod
priv

returns:: (describe returnvalue here)

METHOD:: data
This is the data, it is in itself an Event.

returns:: (describe returnvalue here)

METHOD:: save
Save the data

returns:: (describe returnvalue here)

METHOD:: load
Load data at the path given at creation. This is called automatically at construction if the path is present

returns:: (describe returnvalue here)

METHOD:: init
(describe method here)

ARGUMENT:: path
Where the data is saved

ARGUMENT:: persist_period
The period in seconds between saves

ARGUMENT:: autostart
if the SettingsManager should autostart saving its state immediately after its creation

returns:: (describe returnvalue here)

METHOD:: persist_task
This is the task used to save the data

returns:: (describe returnvalue here)

METHOD:: stop
Stop the background task used to save the data (if it was started before)

returns:: (describe returnvalue here)

METHOD:: start
Call .start if you stopped the manager or if you created it without autostart

returns:: (describe returnvalue here)


EXAMPLES::

code::

~settings = EM_SettingsManager("~/.config/you.settings.session31");

(
a = {|freq=440|
	Out.ar(0, SinOsc.ar(freq));
}.play(args: ~settings.data);
)

(
~slider = EZSlider(controlSpec:[20, 5000]).action_ {|slider|
	~settings.set(\freq, slider.value);
	a.set(\freq, slider.value);
};
)

::