MIDIClient.init
b = Buffer.alloc(s, 4096);
(
m = MIDIOut(0);

a = { |freqs_buf|
	var in = SoundIn.ar(0); 
	var pitch, has_pitch, trig;
	var nfft = 4096;
	var fft_buf = LocalBuf(nfft);
	var chain0;
	# pitch, has_pitch = Tartini.kr(in);
	trig = has_pitch && abs(pitch - LastValue.kr(pitch)) ;
	//SendReply.kr(has_pitch, 'pitch', [pitch]) ;
	
	chain0 = FFT(fft_buf, in);
    chain1 = PV_Copy(chain9, LocalBuf(nfft);
    chain1 = chain1.pvcalc(nfft, 
        {|mags, phases|
            mags.size.postln;
        },
        frombin: 0, tobin: 2047, zeroothers:0
    )
    
	
	
}.play(args:[\freqs, [1,2,3,4]])

)
[1,2,3].size

o = OSCresponder(nil, 'pitch', 
	{|t, r, msg| msg[3].f2n.postln }).add
o.remove
'adu'.hash

true && false

// --------------------------------------------------------------------

(
a = {|a1=1, a2=1, a3=1, a4=1|
	var contact = SoundIn.ar(0);
	var bug = Out.ar(0, _);
	var speaker = Out.ar(1, _);
	var h2 = SoundIn.ar([2,3]) | Mix(_) ;
	var amp = a4*10;
	h2 * amp * a1 | bug;
	contact * amp * a2 | speaker;
	contact * a3 | bug;
	
	

}.play

)

Server.killAll
a.free
Nan

n.fader5.onChanged = {|vel| a.set(\a4, vel/127.0)}
m = MidiPixelation()
m.class.pr_maxid
// -------------------------

n = NanoKontrol()
a.class.browse

n.fader2.onChanged = {|vel| vel.postln}
n.faders['fader1']

'/hola/' ++ 45.asString;

